{"version":3,"sources":["logo.png","components/SignIn.js","components/Welcome.js","components/Confirmation.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","SignIn","Welcome","_ref","email","onSend","subject","setSubject","useState","message","setMessage","subjectError","setSubjectError","messageError","setMessageError","isVerified","setIsVerified","containsGibberish","text","words","trim","split","gibberishRegex","some","word","test","React","createElement","className","src","logo","alt","aria-hidden","fill","focusable","width","height","viewBox","xmlns","d","concat","type","id","placeholder","value","onChange","e","target","required","htmlFor","length","ReCAPTCHA","sitekey","onClick","handleSendClick","valid","wordCount","Confirmation","useEffect","timer","setTimeout","window","location","href","clearTimeout","App","page","setPage","inputValue","setInputValue","errorMessage","setErrorMessage","handleNextClick","validateEmailOrPhone","isBogusEmail","includes","toLowerCase","onKeyDown","event","key","handleSend","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ac5608e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.242fd305.png\";","import React, { useState } from 'react';\nimport './SignIn.css';\nimport logo from '../logo.png';\n\nconst SignIn = ({ onNext }) => {\n    const [inputValue, setInputValue] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const handleNextClick = () => {\n        if (!inputValue) {\n            setErrorMessage('Enter an email or phone number.');\n        } else if (!validateEmailOrPhone(inputValue)) {\n            setErrorMessage('Enter a valid email or phone number.');\n        } else if (isBogusEmail(inputValue) || isGibberish(inputValue)) {\n            setErrorMessage('Couldn\\'t find your Jamie Account');\n        } else {\n            setErrorMessage('');\n            onNext();\n        }\n    };\n\n    const validateEmailOrPhone = (value) => {\n        // Basic email/phone validation logic\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        const phoneRegex = /^[0-9]{7,}$/;\n        return emailRegex.test(value) || phoneRegex.test(value);\n    };\n\n    const isBogusEmail = (value) => {\n        // Check for bogus email or phone\n        const bogusEmails = ['fuckyou@fuckyou.com'];\n        const bogusPhones = ['01234567'];\n        return bogusEmails.includes(value.toLowerCase()) || bogusPhones.includes(value);\n    };\n\n    const isGibberish = (value) => {\n        // Enhanced gibberish detection logic\n        const repeatedCharRegex = /(.)\\1{2,}/;\n        const vowelRegex = /[aeiou]{3,}/i;\n        const consonantRegex = /[bcdfghjklmnpqrstvwxyz]{4,}/i;\n        const randomCharRegex = /^[a-z0-9]+@[a-z0-9]+\\.[a-z]+$/i;\n        const dictionaryWords = ['test', 'email', 'example', 'valid', 'address']; // Add more common words to this list\n        const words = value.split(/[@.]/);\n\n        // Check if any word is in the dictionary\n        const isDictionaryWord = words.some(word => dictionaryWords.includes(word.toLowerCase()));\n\n        return repeatedCharRegex.test(value) || vowelRegex.test(value) || consonantRegex.test(value) || !randomCharRegex.test(value) || !isDictionaryWord;\n    };\n\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            handleNextClick();\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <div className=\"left-section\">\n                    <div className=\"logo-container\">\n                        <img src={logo} alt=\"Logo\" className=\"logo\" />\n                    </div>\n                    <div className=\"text-container\">\n                        <div className=\"sign-in-text\">Contact me</div>\n                        <div className=\"account-text\">Use your Jamie Account</div>\n                    </div>\n                </div>\n                <div className=\"right-section\">\n                    <div className=\"input-group\">\n                        <div className={`input-container ${errorMessage ? 'error' : ''}`}>\n                            <input\n                                type=\"text\"\n                                id=\"email\"\n                                className=\"input\"\n                                placeholder=\" \"\n                                value={inputValue}\n                                onChange={(e) => setInputValue(e.target.value)}\n                                onKeyDown={handleKeyDown} // Ensure this is attached to the input\n                                required\n                            />\n                            <label htmlFor=\"email\" className=\"input-label\">Email or phone</label>\n                            {errorMessage && (\n                                <div className=\"error-message\">\n                                    <svg aria-hidden=\"true\" className=\"error-icon\" fill=\"currentColor\" focusable=\"false\" width=\"16px\" height=\"16px\" viewBox=\"0 0 24 24\" xmlns=\"https://www.w3.org/2000/svg\">\n                                        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"></path>\n                                    </svg>\n                                    {errorMessage}\n                                </div>\n                            )}\n                        </div>\n                        <a href=\"#\" className=\"forgot-email\">Forgot email?</a>\n                    </div>\n                    <div className=\"info-text\">\n                        <p>Not your computer? Use Guest mode to sign in privately.</p>\n                        <a href=\"#\" className=\"learn-more\">Learn more about using Guest mode</a>\n                    </div>\n                    <div className=\"actions\">\n                        <button className=\"create-account\">Create account</button>\n                        <button className=\"next-button\" onClick={handleNextClick}>Next</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SignIn;\n","import React, { useState } from 'react';\nimport './Welcome.css';\nimport logo from '../logo.png';\nimport ReCAPTCHA from 'react-google-recaptcha';\n\nconst Welcome = ({ email, onSend }) => {\n  const [subject, setSubject] = useState('');\n  const [message, setMessage] = useState('');\n  const [subjectError, setSubjectError] = useState('');\n  const [messageError, setMessageError] = useState('');\n  const [isVerified, setIsVerified] = useState(false);\n\n  const handleSendClick = () => {\n    let valid = true;\n\n    if (!subject) {\n      setSubjectError('Please complete all required fields.');\n      valid = false;\n    } else {\n      setSubjectError('');\n    }\n\n    const wordCount = message.trim().split(/\\s+/).length;\n    if (!message) {\n      setMessageError('Please complete all required fields.');\n      valid = false;\n    } else if (wordCount < 200) {\n      setMessageError('Please write 200 words before sending to avoid spam.');\n      valid = false;\n    } else if (containsGibberish(message)) {\n      setMessageError('Please use correct language format.');\n      valid = false;\n    } else {\n      setMessageError('');\n    }\n\n    if (valid && isVerified) {\n      onSend();\n    }\n  };\n\n  const handleRecaptchaChange = (value) => {\n    if (value) {\n      setIsVerified(true);\n    } else {\n      setIsVerified(false);\n    }\n  };\n\n  const containsGibberish = (text) => {\n    // Simple gibberish detection logic, can be improved\n    const words = text.trim().split(/\\s+/);\n    const gibberishRegex = /[a-zA-Z]{10,}/;\n    return words.some(word => gibberishRegex.test(word));\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"left-section\">\n          <div className=\"logo-container\">\n            <img src={logo} alt=\"Logo\" className=\"logo\" />\n          </div>\n          <div className=\"text-container\">\n            <div className=\"sign-in-text\">Welcome</div>\n            <div className=\"dropdown-container\">\n              <div className=\"dropdown-content\">\n                <img src=\"profile_icon.png\" alt=\"Profile Icon\" className=\"profile-icon\" />\n                <span className=\"email\">{email}</span>\n                <svg aria-hidden=\"true\" className=\"dropdown-arrow\" fill=\"currentColor\" focusable=\"false\" width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" xmlns=\"https://www.w3.org/2000/svg\"><path d=\"M7 10l5 5 5-5z\"></path></svg>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"right-section\">\n          <div className=\"input-group\">\n            <div className={`input-container ${subjectError ? 'error' : ''}`}>\n              <input\n                type=\"text\"\n                id=\"subject\"\n                className=\"input\"\n                placeholder=\" \"\n                value={subject}\n                onChange={(e) => setSubject(e.target.value)}\n                required\n              />\n              <label htmlFor=\"subject\" className=\"input-label\">Subject</label>\n              {subjectError && <div className=\"error-message\">{subjectError}</div>}\n            </div>\n            <div className={`input-container message ${messageError ? 'error' : ''}`}>\n              <textarea\n                id=\"message\"\n                className=\"input\"\n                placeholder=\" \"\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                required\n              />\n              <label htmlFor=\"message\" className=\"input-label\">Message</label>\n              <div className=\"word-count\">{message.trim().split(/\\s+/).length} words</div>\n              {messageError && <div className=\"error-message\">{messageError}</div>}\n            </div>\n            <ReCAPTCHA\n              sitekey=\"YOUR_RECAPTCHA_SITE_KEY\"\n              onChange={handleRecaptchaChange}\n            />\n            <button\n              className=\"next-button\"\n              onClick={handleSendClick}\n            >\n              Send\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Welcome;\n","import React, { useEffect } from 'react';\nimport './Confirmation.css';\n\nconst Confirmation = () => {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      window.location.href = 'https://jamieparishooper.com';\n    }, 5000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div className=\"confirmation-container\">\n      <h1>Your message has been sent!</h1>\n      <p>You will be redirected to the homepage shortly.</p>\n    </div>\n  );\n};\n\nexport default Confirmation;\n","import React, { useState } from 'react';\nimport './App.css';\nimport SignIn from './components/SignIn';\nimport Welcome from './components/Welcome';\nimport Confirmation from './components/Confirmation';\nimport logo from './logo.png';\n\nfunction App() {\n  const [page, setPage] = useState('signin');\n  const [inputValue, setInputValue] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleNextClick = () => {\n    if (!inputValue) {\n      setErrorMessage('Enter an email or phone number.');\n    } else if (!validateEmailOrPhone(inputValue)) {\n      setErrorMessage('Enter a valid email or phone number.');\n    } else if (isBogusEmail(inputValue)) {\n      setErrorMessage('Couldn\\'t find your Jamie Account');\n    } else {\n      setErrorMessage('');\n      setPage('welcome');\n    }\n  };\n\n  const validateEmailOrPhone = (value) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    const phoneRegex = /^[0-9]{7,}$/;\n    return emailRegex.test(value) || phoneRegex.test(value);\n  };\n\n  const isBogusEmail = (value) => {\n    const bogusEmails = ['fuckyou@fuckyou.com'];\n    const bogusPhones = ['01234567'];\n    return bogusEmails.includes(value.toLowerCase()) || bogusPhones.includes(value);\n  };\n\n  const handleSend = () => {\n    setPage('confirmation');\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter') {\n      handleNextClick();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {page === 'signin' && (\n        <div className=\"container\">\n          <div className=\"left-section\">\n            <div className=\"logo-container\">\n              <img src={logo} alt=\"Logo\" className=\"logo\" />\n            </div>\n            <div className=\"text-container\">\n              <div className=\"sign-in-text\">Contact me</div>\n              <div className=\"account-text\">Use your Jamie Account</div>\n            </div>\n          </div>\n          <div className=\"right-section\">\n            <div className=\"input-group\">\n              <div className={`input-container ${errorMessage ? 'error' : ''}`}>\n                <input\n                  type=\"text\"\n                  id=\"email\"\n                  className=\"input\"\n                  placeholder=\" \"\n                  value={inputValue}\n                  onChange={(e) => setInputValue(e.target.value)}\n                  onKeyDown={handleKeyDown} // Ensure this is attached to the input\n                  required\n                />\n                <label htmlFor=\"email\" className=\"input-label\">Email or phone</label>\n              </div>\n              {errorMessage && (\n                <div className=\"error-message\">\n                  <svg aria-hidden=\"true\" className=\"error-icon\" fill=\"currentColor\" focusable=\"false\" width=\"16px\" height=\"16px\" viewBox=\"0 0 24 24\" xmlns=\"https://www.w3.org/2000/svg\">\n                    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"></path>\n                  </svg>\n                  {errorMessage}\n                </div>\n              )}\n              <a href=\"#\" className=\"forgot-email\">Forgot email?</a>\n            </div>\n            <div className=\"info-text\">\n              <p>Not your computer? Use Guest mode to sign in privately.</p>\n              <a href=\"#\" className=\"learn-more\">Learn more about using Guest mode</a>\n            </div>\n            <div className=\"actions\">\n              <button className=\"create-account\">Create account</button>\n              <button className=\"next-button\" onClick={handleNextClick}>Next</button>\n            </div>\n          </div>\n        </div>\n      )}\n      {page === 'welcome' && <Welcome email={inputValue} onSend={handleSend} />}\n      {page === 'confirmation' && <Confirmation />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\nreportWebVitals();\n"],"sourceRoot":""}